package basic.ch13.sec01;

// 제네릭 타입 T를 정의한 Box 클래스
public class Box<T> {
    public T content; // content의 타입을 T로 지정
}

// <T>는 제네릭 타입 파라미터로, 사용자가 원하는 타입으로 대체됨
// 예: Box<String>, Box<Integer> 등
// content의 타입은 이 Box가 어떤 타입으로 선언되었느냐에 따라 결정됨

/*
* ## ✅ 제네릭(Generic) 기본 개념 정리

### 🔸 제네릭이란?
- 클래스나 메서드를 **타입에 의존하지 않게** 설계할 수 있도록 해주는 문법
- 실제 사용할 때 타입을 지정해서 사용함
- **하나의 클래스/메서드로 다양한 타입을 처리**할 수 있게 함

### 🔸 제네릭 타입은 어떤 타입인가?
- `T`, `E`, `K`, `V` 등은 실제 타입이 **아닌**, 임시로 써놓은 **타입 변수**
- 특별한 타입이 아니라, **나중에 String, Integer 등 구체적인 타입으로 바뀔 자리**
- 실제 사용할 때 타입을 지정해줘야 함

예:
```java
Box<String> box1 = new Box<>();
Box<Integer> box2 = new Box<>();
```

### 🔸 제네릭 클래스 선언 방법
```java
public class Box<T> {
    public T content;
}
```

- `<T>`: 제네릭 타입 파라미터 선언
- `T content`: content 필드의 타입은 T로 설정

---

## ✅ 클래스 멤버란?

자바 클래스의 "멤버(member)"는 다음을 모두 포함해요:

| 멤버 종류  | 설명 |
|------------|------|
| **필드(Field)**     | 클래스의 변수, 상태를 저장함  |
| **메소드(Method)**  | 클래스가 수행할 기능(함수) |
| **생성자(Constructor)** | 객체를 생성할 때 호출되는 특수한 메소드 |

👉 따라서 “멤버를 제네릭 타입으로 정의하라”는 말은
필드든 메소드든 생성자든, **타입 자리에 제네릭 타입을 써라**는 뜻!

---

### 💡 제네릭을 쓰는 이유
- 코드 재사용성 증가
- 타입 안정성 확보 (컴파일 시 타입 체크 가능)
- 불필요한 형변환(casting) 줄임
* */