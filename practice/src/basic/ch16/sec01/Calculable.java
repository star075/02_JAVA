package basic.ch16.sec01;

/*
 * 함수형 인터페이스
 * - 단하나의 추상 메서드만 가지는 인터페이스
 * */

// 함수형 인터페이스로 명시 (메서드가 1개이므로 람다식 사용 가능!)
@FunctionalInterface
public interface Calculable {
    // 추상메서드
    void calculate(int x, int y); // 두 개의 정수를 받아서 처리하는 추상 메서드
//    void calculate2(int x, int y);
}

/*
 * ✅ 개념 정리
 *
 * ▶ 함수형 인터페이스란?
 * - **추상 메서드가 단 하나**만 존재하는 인터페이스
 * - 이 인터페이스는 **람다식으로 구현할 수 있음**
 *
 * ▶ @FunctionalInterface 란?
 * - 이 인터페이스가 함수형임을 명시적으로 알려주는 역할
 * - 실수로 메서드를 2개 이상 만들면 컴파일 오류 발생시켜줌 (안전장치)
 *
 * ▶ 익명 클래스 vs 람다식 차이
 * - 익명 클래스: new 인터페이스() { 메서드 구현 }
 * - 람다식: (매개변수) -> { 실행할 코드 }
 *
 * ▶ 람다식 사용 조건
 * - 반드시 함수형 인터페이스여야 함 (메서드 하나만 있어야 함)
 * - 매개변수가 2개 → (x, y) -> { 실행할 코드 } 형태로 표현
 *
 * ▶ 실행 흐름
 * - calc1은 익명 클래스로 calculate()를 구현
 * - calc2는 람다식으로 calculate()를 구현
 * - 둘 다 같은 인터페이스를 따르고 있으며 동작도 같음!
 */